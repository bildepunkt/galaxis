{"version":3,"sources":["../src/main.js"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["class Camera {\n    constructor (x=0, y=0) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\nclass FSM {\n    constructor (states, game, camera, pool, width, height) {\n        this.states = states;\n        this.game = game;\n        this.camera = camera;\n        this.pool = pool;\n        this.width = width;\n        this.height = height;\n    }\n    \n    load (name) {\n        if (this.state && this.state.remove) {\n            this.state.remove();\n        }\n\n        this.state = this.states[name];\n        \n        this.state.game = this.game;\n        this.state.camera = this.camera\n        this.state.pool = this.pool;\n        this.state.fsm = this;\n        this.state.width = this.width;\n        this.state.height = this.height;\n\n        if (this.state.init) {\n            this.state.init();\n        }\n    }\n}\n\nclass Pool {\n    constructor (...items) {\n        this.items = items || [];\n    }\n    \n    /**\n     * Add n items(s)\n     * @method Collection#add\n     * @param  {...Object} items - item(s) to add\n     */\n    add (...items) {\n        for (let item of items) {\n            this.items.push(item);\n        }\n    }\n\n    /**\n     * Add an item at a given index\n     * @method Collection#addAt\n     * @param  {Integer} index - The index to add the item\n     * @param  {Any}     item - The item to add\n     */\n    addAt (index, item) {\n        if (index > this.getCount()) {\n            this.add(item);\n        } else {\n            this.items.splice(index, 0, item);\n        }\n    }\n\n    /**\n     * Iterates the collection's sorted items. The item, index, and name are supplied\n     * to the provided function\n     * @method Collection#each\n     * @param {Function} fn - The function to execute on the iterable\n     * @param {Object} [scope] - The scope with which to execute the function\n     */\n    each (fn, scope) {\n        fn = scope ? fn.bind(scope) : fn;\n\n        for (let i = 0, len = this.getCount(); i < len; i++) {\n            let item = this.items[i];\n            let doContinue;\n\n            // if item on last item and an item is removed\n            if (!item) {\n                break;\n            }\n\n            doContinue = fn(item, i);\n\n            if (doContinue === false) {\n                break;\n            }\n        }\n    }\n\n    /**\n     * Returns an object at a given index\n     * @method Collection#fetchAt\n     * @param  {Integer} index - The index\n     * @return {Any}\n     */\n    fetchAt (index) {\n        return this.items[index];\n    }\n\n    /**\n     * iterates items and return the ones that meet criteria\n     * @method Collection#filter\n     * @param  {Function} fn - Truth predicate\n     * @param  {Object} [scope] - The scope in which to execute the function\n     * @return {Array}\n     */\n    filter(fn, scope) {\n        let filteredItems = [];\n\n        this.each((item, i)=> {\n            let predicate = fn(item, i);\n\n            if (predicate) {\n                filteredItems.push(item);\n            }\n        }, scope);\n\n        return filteredItems;\n    }\n\n    /**\n     * Returns the count of items in group\n     * @method Collection#getCount\n     * @return {Integer} - The item count\n     */\n    getCount () {\n        return this.items.length;\n    }\n\n    /**\n     * Returns the given item's index, with optional starting index\n     * @method Collection#getIndex\n     * @param  {Any} item - the item to query\n     * @param  {Integer} [fromIndex] - starting index\n     * @return {Integer} - the item's index\n     */\n    getIndex (item, fromIndex) {\n        return this.items.indexOf(item, fromIndex);\n    }\n\n    /**\n     * Checks if item is at front of render order\n     * @method Collection#isAtFront\n     * @param  {Any} item - The item to query\n     * @return {Boolean} - If item is at front\n     */\n    isAtFront (item) {\n        return this.getIndex(item) === this.getCount() - 1;\n    }\n\n    /**\n     * Checks if item is at back of render order\n     * @method Collection#isAtBack\n     * @param  {Any} item - The item to query\n     * @return {Boolean} - If item is at back\n     */\n    isAtBack (item) {\n        return this.getIndex(item) === 0;\n    }\n\n    /**\n     * Moves an item to a new index\n     * @method Collection#move\n     * @param  {Any} movee - the item to move\n     * @param  {Integer} indices - the amount of indices to shift item. Can be positive/negative\n     * @return {Boolean} - Whether the item was successfully moved\n     */\n    move (movee, indices) {\n        const index = this.getIndex(movee);\n\n        if (indices === 0) {\n            return false;\n        }\n\n        // cannot move before begining (don't use isAtBack to save getIndex use)\n        if (index === 0 && indices < 0) {\n            return false;\n        }\n\n        // cannot move past end (don't use isAtFront to save getIndex use)\n        if (index === this.getCount() - 1 && indices > 0) {\n            return false;\n        }\n\n        this.remove(movee);\n        this.addAt(index + indices, movee);\n\n        return true;\n    }\n\n    /**\n     * Moves an item to the front of the render order\n     * @method Collection#moveToFront\n     * @param  {Any} movee - the item to move\n     * @return {Boolean} - Whether item successfully moved\n     */\n    moveToFront (movee) {\n        if (this.isAtFront(movee)) {\n            return false;\n        }\n\n        this.remove(movee);\n        this.addAt(this.getCount(), movee);\n\n        return true;\n    }\n\n    /**\n     * Moves an item to the back of the render order\n     * @method Collection#moveToBack\n     * @param  {Any} movee - the item to move\n     * @return {Boolean} - Whether item successfully moved\n     */\n    moveToBack (movee) {\n        if (this.isAtBack(movee)) {\n            return false;\n        }\n\n        this.remove(movee);\n        this.addAt(0, movee);\n\n        return true;\n    }\n\n    /**\n     * Remove item by name\n     * @method Collection#removeBy\n     * @param {String} removee - The item to remove\n     * @return {Boolean} - Whether item was successfully removed\n     */\n    remove (removee) {\n        let removed = false;\n\n        for (let i = 0, len = this.getCount(); i < len; i++) {\n            let item = this.items[i];\n            if (spriteMatch(item, removee)) {\n                this.items.splice(i, 1);\n                removed = true;\n                break;\n            }\n        }\n\n        return removed;\n    }\n\n    /**\n     * Removes all items\n     * @method Collection#removeAll\n     */\n    removeAll () {\n        this.items = [];\n    }\n\n    /**\n     * Remove item at given index\n     * @method Collection#removeAt\n     * @param {Integer} index - The index of the item to remove\n     */\n    removeAt (index) {\n        this.items.splice(index, 1);\n    }\n}\n\nclass Ticker {\n    constructor (callback) {\n        this.callback = callback;\n        this.then = Date.now();\n        this.update = this.update.bind(this);\n        this.cancelled = false\n\n        this.update();\n    }\n\n    update () {\n        if (this.cancelled) {\n            return;\n        }\n\n        let now = Date.now();\n        let delta = Math.min(now - this.then, 32);\n\n        this.callback(delta);\n        this.then = now;    \n\n        this.requestId = requestAnimationFrame(this.update);\n    }\n\n    destroy () {\n        this.cancelled = true;\n        cancelAnimationFrame(this.requestId);\n    }\n}\n\nclass Viewport {\n    constructor (width, height, id) {\n        this.width = width;\n        this.height = height;\n        this.canvas = document.querySelector(\"#\" + id);\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n        this.context = this.canvas.getContext(\"2d\");\n    }\n\n    clear (fill) {\n        if (fill) {\n            this.context.fillStyle = fill;\n            this.context.fillRect(0, 0, this.width, this.height);\n        } else {\n            this.context.clearRect(0, 0, this.width, this.height);\n        }\n    }\n}\n\nclass Preloader {\n    constructor (paths, callback) {\n        this.callback = callback;\n        this.loaded = 0;\n        this.count = paths.length;\n\n        for (let path of paths) {\n            let asset;\n\n            switch (this.getType(path)) {\n            case \"audio\":\n                asset = new Audio();\n                break;\n            case \"image\":\n                asset = new Image();\n                break;\n            }\n\n            asset.onload = this.onLoad();\n        }\n    }\n\n    getType (path) {\n        return path.indexOf(\".mp3\") > 0 || path.indexOf(\".wav\") > 0 || path.indexOf(\".ogv\") > 0 ?\n            \"audio\" :\n            \"image\";\n    }\n\n    onLoad () {\n        this.loaded++;\n        console.log(`asset ${this.loaded} of ${this.count} loaded`);\n\n        if (this.loaded === this.count) {\n            console.log(\"assets loaded\");\n            this.callback();\n        }\n    }\n}\n\nclass Sprite {\n    constructor (x=0, y=0) {\n        this.x = x;\n        this.y = y;\n        this.width = 64;\n        this.height = 64;\n        this.alpha = 1;\n        this.rotation = 0;\n        this.scaleX = 1;\n        this.scaleY = 1;\n        this.pivotX = 0;\n        this.pivotY = 0;\n        this.visible = true;\n    }\n\n    render (context) {\n        if (!this.visible) {\n            return;\n        }\n\n        context.translate(-this.pivotX, -this.pivotY);\n        context.translate(this.x, this.y);\n        \n        if (this.rotation !== 0) {\n            context.translate(this.pivotX, this.pivotY);\n            context.rotate(this.rotation * Math.PI / 180);\n            context.translate(-this.pivotX, -this.pivotY);\n        }\n\n        if (this.scaleX !== 1 || this.scaleY !== 1) {\n            context.translate(this.pivotX, this.pivotY);\n            context.scale(this.scaleX, this.scaleY);\n            context.translate(-this.pivotX, -this.pivotY);\n        }\n\n        context.globalAlpha = this.alpha;\n\n        // TODO - R E M O V E ! ! !\n        context.fillStyle = \"#000\";\n        context.fillRect(0, 0, this.width, this.height);\n    }\n}\n\nclass Game {\n    constructor (states, options) {\n        const defaults = {\n            width: 800,\n            height: 600,\n            id: \"game\",\n            preload: []\n        };\n\n        this.states = states;\n        this.options = Object.assign(defaults, options);\n        this.hasBooted = false;\n\n        this.boot();\n    }\n\n    boot () {\n        // psuedo game object\n        this.game = {\n            reset: this.boot.bind(this)\n        };\n        this.camera = new Camera();\n        this.pool = new Pool();\n        this.viewport = new Viewport(\n            this.options.width, this.options.height, this.options.id\n        );\n        this.fsm = new FSM(\n            this.states, this.game, this.camera, this.pool, this.options.width, this.options.height\n        );\n\n        if (this.hasBooted) {\n            this.ticker.destroy();\n        }\n\n        this.ticker = new Ticker(this.update.bind(this));\n\n        if (!this.hasBooted && this.options.preload.length) {\n            new Preloader(this.options.preload, ()=> {\n                this.fsm.load(\"initial\");\n            });\n        } else {\n            this.fsm.load(\"initial\");\n        }\n\n        this.hasBooted = true;\n    }\n\n    update (delta) {\n        if (!this.fsm.state) {\n            return;\n        }\n\n        this.viewport.clear(this.fsm.state.bgColor);\n        this.viewport.context.save();\n        this.viewport.context.translate(-this.camera.x, -this.camera.y);\n\n        this.fsm.state.update(delta);\n        this.fsm.state.pool.each(item=> {\n            this.viewport.context.save();\n            item.render(this.viewport.context);\n            this.viewport.context.restore();\n        }, this);\n\n        this.viewport.context.restore();\n    }\n}\n\nnew Game({\n    initial: {\n        init () {\n            console.log(\"initial#init\");\n\n            this.bgColor = \"#678\";\n            this.rect = new Sprite();\n            this.rect.pivotX = 32;\n            this.rect.pivotY = 32;\n            this.rect.rotation = 45;\n            this.rect.scaleX = 2;\n            this.rect.scaleY = 2;\n            this.pool.add(this.rect);\n        },\n        update (delta) {\n            console.log(\"initial#update\", delta);\n\n            let speed = delta / 4;\n\n            this.rect.x += speed;\n            this.rect.rotation += speed;\n\n            if (this.rect.x + this.rect.width >= this.width) {\n                this.fsm.load(\"play\");\n            }\n        },\n        remove () {\n            console.log(\"initial#remove\");\n\n            this.pool.removeAll();\n        }\n    },\n    play: {\n        init () {\n            console.log(\"play#init\");\n        },\n        update (delta) {\n            console.log(\"play#update\", delta);\n\n            this.game.reset();\n        }\n    }\n}, {\n    preload: [\n        \"assets/cragger.png\"\n    ]\n});\n"]}